name: CI-CD Pipline
on:
  push:
    branches:
          - develop
          - test
          - main 
jobs:
  cd-build-deploy-development:
    name: Provision infrastructure Build and Deploy - Development
    runs-on: ubuntu-latest
    environment: Development
    if: github.ref == 'refs/heads/develop'
    env:
      AZURE_FUNCTIONAPP_NAME: development
      AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
      DOTNET_VERSION: '6.0.x' 
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.MVP_SUBSCRIPTION }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      Terraform_Path: './terraform'
      
    steps:
      - name: Log in with Azure
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}'
      - name: Checkout
        uses: actions/checkout@v3

      - name: 'Terraform init2'
        id: init
        run: |
           cd ${{ env.Terraform_Path}}
           terraform init

      - name: 'Terraform Format'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.14.8
          tf_actions_subcommand: 'fmt'
          tf_actions_working_dir: "./terraform"
 
      - name: 'Terraform Init'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.14.8
          tf_actions_subcommand: 'init'
          tf_actions_working_dir: "./terraform"

      - name: 'Terraform Validate'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.14.8
          tf_actions_subcommand: 'validate'
          tf_actions_working_dir: "./terraform"

      - name: 'Terraform Plan'
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.14.8
          tf_actions_subcommand: 'plan'
          tf_actions_working_dir: "./terraform"

      - name: Terraform Apply
        uses: hashicorp/terraform-github-actions@master
        with:
          tf_actions_version: 0.14.8
          tf_actions_subcommand: 'apply'
          tf_actions_working_dir: "./terraform"
      - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Resolve Project Dependencies Using Dotnet
        shell: pwsh
        run: |
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          dotnet build --configuration Release --output ./output
          popd
      - name: Run Azure Functions Action
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

  cd-build-deploy-test:
    name: Build and Deploy - Test
    runs-on: ubuntu-latest
    environment: Test
    if: github.ref == 'refs/heads/test'
    env:
      AZURE_FUNCTIONAPP_NAME: test
      AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
      DOTNET_VERSION: '6.0.x' 

    steps:

      - name: Checkout
        uses: actions/checkout@main

      - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Resolve Project Dependencies Using Dotnet
        shell: pwsh
        run: |
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          dotnet build --configuration Release --output ./output
          popd
      - name: Run Azure Functions Action
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

  cd-build-deploy-production:
    name: Build and Deploy - Production
    runs-on: ubuntu-latest
    environment: Production
    if: github.ref == 'refs/heads/main'
    env:
      AZURE_FUNCTIONAPP_NAME: staging
      AZURE_FUNCTIONAPP_PACKAGE_PATH: '.'
      DOTNET_VERSION: '6.0.x' 
    steps:

      - name: Checkout
        uses: actions/checkout@main

      - name: Setup DotNet ${{ env.DOTNET_VERSION }} Environment
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Resolve Project Dependencies Using Dotnet
        shell: pwsh
        run: |
          pushd './${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}'
          dotnet build --configuration Release --output ./output
          popd
      - name: Run Azure Functions Action
        uses: Azure/functions-action@v1
        id: fa
        with:
          app-name: ${{ env.AZURE_FUNCTIONAPP_NAME }}
          package: '${{ env.AZURE_FUNCTIONAPP_PACKAGE_PATH }}/output'
          publish-profile: ${{ secrets.AZURE_FUNCTIONAPP_PUBLISH_PROFILE }}

          
      - name: Swap staging with product environment 
        uses: azure/login@v1
        with:
          creds: '${{ secrets.AZURE_CREDENTIALS }}' 
      - run: | 
               az functionapp deployment slot swap -g ibinder -n ibinder --slot staging 
               echo "hello world!"

        
#####
#####
#####
#####
#####